#!/bin/sh

# lxsh: A minimal POSIX-compliant shell for a custom Linux distribution

# Initialize configuration and directories
CONFIG_DIR="$HOME/.config/lxsh"
HISTORY_FILE="$CONFIG_DIR/history"
CONFIG_FILE="$CONFIG_DIR/config"
HISTORY_POS_FILE="$CONFIG_DIR/history_pos"

if [ ! -d "$CONFIG_DIR" ]; then
    mkdir -p "$CONFIG_DIR"
    if [ $? -ne 0 ]; then
        echo "lxsh: Error: Failed to create config directory $CONFIG_DIR" >&2
        exit 1
    fi
fi

# Generate default config if it doesn't exist
if [ ! -f "$CONFIG_FILE" ]; then
    cat << 'EOF' > "$CONFIG_FILE"
# lxsh configuration file

# Prompt colors (ANSI escape codes)
COLOR_GREY='\033[90m'
COLOR_BLUE='\033[34m'
COLOR_GREEN='\033[32m'
COLOR_RED='\033[31m'
COLOR_NORMAL='\033[0m'

# Custom shell prompt with username and path
PS1="$COLOR_GREEN$(whoami)$COLOR_NORMAL@$COLOR_BLUE$(pwd | sed "s|$HOME|~|") $COLOR_GREY\357\205\270 $COLOR_NORMAL "

# History settings
HISTORY_SIZE=1000

# Aliases for colored command outputs
alias ls='ls --color=auto'
alias grep='grep --color=auto'
EOF
    if [ $? -ne 0 ]; then
        echo "lxsh: Error: Failed to create config file $CONFIG_FILE" >&2
        exit 1
    fi
    echo "lxsh: Generated config file at $CONFIG_FILE" >&2
fi

# Source config
if [ -f "$CONFIG_FILE" ]; then
    if . "$CONFIG_FILE" 2>/dev/null; then
        echo "" >&2
    else
        echo "lxsh: Error: Failed to source config file $CONFIG_FILE, using fallback prompt" >&2
        PS1='$ '
    fi
else
    echo "lxsh: Error: Config file $CONFIG_FILE not found, using fallback prompt" >&2
    PS1='$ '
fi

# Initialize history
if [ ! -f "$HISTORY_FILE" ]; then
    touch "$HISTORY_FILE"
    if [ $? -ne 0 ]; then
        echo "lxsh: Error: Failed to create history file $HISTORY_FILE" >&2
        exit 1
    fi
fi

# Initialize history position
if [ ! -f "$HISTORY_POS_FILE" ]; then
    echo "0" > "$HISTORY_POS_FILE"
    if [ $? -ne 0 ]; then
        echo "lxsh: Error: Failed to create history position file $HISTORY_POS_FILE" >&2
        exit 1
    fi
fi

# Truncate history if needed
if [ -n "$HISTORY_SIZE" ]; then
    tail -n "$HISTORY_SIZE" "$HISTORY_FILE" > "$HISTORY_FILE.tmp" && mv "$HISTORY_FILE.tmp" "$HISTORY_FILE"
    if [ $? -ne 0 ]; then
        echo "lxsh: Error: Failed to truncate history file $HISTORY_FILE" >&2
        exit 1
    fi
fi

# Main shell loop
while true; do
    # Display prompt
    eval "echo -n \"$PS1\"" 2>/dev/null || {
        echo "lxsh: Error: Failed to evaluate PS1 prompt" >&2
        PS1='$ '
        echo -n "$PS1"
    }
    
    # Read command
    if [ -t 0 ]; then
        IFS= read -r cmd || break
    else
        # Non-interactive mode
        IFS= read -r cmd || break
    fi
    
    # Skip empty commands
    [ -z "$cmd" ] && continue
    
    # Store in history
    echo "$cmd" >> "$HISTORY_FILE"
    
    # Handle built-in commands
    case "$cmd" in
        exit)
            exit 0
            ;;
        cd\ *)
            dir=$(echo "$cmd" | sed 's/^cd //')
            if ! cd "$dir" 2>/dev/null; then
                echo "$COLOR_RED""lxsh: cd: $dir: No such directory""$COLOR_NORMAL" >&2
            fi
            ;;
        history)
            cat -n "$HISTORY_FILE"
            ;;
        'history up')
            # Read current history position
            pos=$(cat "$HISTORY_POS_FILE")
            # Count total history lines
            total=$(wc -l < "$HISTORY_FILE")
            if [ "$total" -eq 0 ]; then
                echo "lxsh: No history available" >&2
                continue
            fi
            # Increment position (move to older command)
            new_pos=$((pos + 1))
            if [ "$new_pos" -gt "$total" ]; then
                new_pos="$total"
            fi
            echo "$new_pos" > "$HISTORY_POS_FILE"
            # Display the selected command
            cmd=$(tail -n "$new_pos" "$HISTORY_FILE" | head -n 1)
            printf "\r%s%s" "$PS1" "$cmd"
            continue
            ;;
        'history down')
            # Read current history position
            pos=$(cat "$HISTORY_POS_FILE")
            # Decrement position (move to newer command)
            new_pos=$((pos - 1))
            if [ "$new_pos" -lt 0 ]; then
                new_pos=0
            fi
            echo "$new_pos" > "$HISTORY_POS_FILE"
            # Display the selected command or clear if at newest
            if [ "$new_pos" -eq 0 ]; then
                cmd=""
                printf "\r%s%s" "$PS1" "$cmd"
            else
                cmd=$(tail -n "$new_pos" "$HISTORY_FILE" | head -n 1)
                printf "\r%s%s" "$PS1" "$cmd"
            fi
            continue
            ;;
        'lxsh --version')
            echo "lxsh 1.0"
            exit 0
            ;;
        *)
            # Execute external command
            if ! eval "$cmd" 2>/dev/null; then
                echo "$COLOR_RED""lxsh: command not found: $cmd""$COLOR_NORMAL" >&2
            fi
            # Reset history position after external command
            echo "0" > "$HISTORY_POS_FILE"
            ;;
    esac
done
